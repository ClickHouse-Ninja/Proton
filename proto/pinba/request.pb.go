// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/pinba/request.proto

package pinba

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Hostname             *string    `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	ServerName           *string    `protobuf:"bytes,2,req,name=server_name,json=serverName" json:"server_name,omitempty"`
	ScriptName           *string    `protobuf:"bytes,3,req,name=script_name,json=scriptName" json:"script_name,omitempty"`
	RequestCount         *uint32    `protobuf:"varint,4,req,name=request_count,json=requestCount" json:"request_count,omitempty"`
	DocumentSize         *uint32    `protobuf:"varint,5,req,name=document_size,json=documentSize" json:"document_size,omitempty"`
	MemoryPeak           *uint32    `protobuf:"varint,6,req,name=memory_peak,json=memoryPeak" json:"memory_peak,omitempty"`
	RequestTime          *float32   `protobuf:"fixed32,7,req,name=request_time,json=requestTime" json:"request_time,omitempty"`
	RuUtime              *float32   `protobuf:"fixed32,8,req,name=ru_utime,json=ruUtime" json:"ru_utime,omitempty"`
	RuStime              *float32   `protobuf:"fixed32,9,req,name=ru_stime,json=ruStime" json:"ru_stime,omitempty"`
	TimerHitCount        []uint32   `protobuf:"varint,10,rep,name=timer_hit_count,json=timerHitCount" json:"timer_hit_count,omitempty"`
	TimerValue           []float32  `protobuf:"fixed32,11,rep,name=timer_value,json=timerValue" json:"timer_value,omitempty"`
	TimerTagCount        []uint32   `protobuf:"varint,12,rep,name=timer_tag_count,json=timerTagCount" json:"timer_tag_count,omitempty"`
	TimerTagName         []uint32   `protobuf:"varint,13,rep,name=timer_tag_name,json=timerTagName" json:"timer_tag_name,omitempty"`
	TimerTagValue        []uint32   `protobuf:"varint,14,rep,name=timer_tag_value,json=timerTagValue" json:"timer_tag_value,omitempty"`
	Dictionary           []string   `protobuf:"bytes,15,rep,name=dictionary" json:"dictionary,omitempty"`
	Status               *uint32    `protobuf:"varint,16,opt,name=status" json:"status,omitempty"`
	MemoryFootprint      *uint32    `protobuf:"varint,17,opt,name=memory_footprint,json=memoryFootprint" json:"memory_footprint,omitempty"`
	Requests             []*Request `protobuf:"bytes,18,rep,name=requests" json:"requests,omitempty"`
	Schema               *string    `protobuf:"bytes,19,opt,name=schema" json:"schema,omitempty"`
	TagName              []uint32   `protobuf:"varint,20,rep,name=tag_name,json=tagName" json:"tag_name,omitempty"`
	TagValue             []uint32   `protobuf:"varint,21,rep,name=tag_value,json=tagValue" json:"tag_value,omitempty"`
	TimerRuUtime         []float32  `protobuf:"fixed32,22,rep,name=timer_ru_utime,json=timerRuUtime" json:"timer_ru_utime,omitempty"`
	TimerRuStime         []float32  `protobuf:"fixed32,23,rep,name=timer_ru_stime,json=timerRuStime" json:"timer_ru_stime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_c55800836c973032, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetHostname() string {
	if m != nil && m.Hostname != nil {
		return *m.Hostname
	}
	return ""
}

func (m *Request) GetServerName() string {
	if m != nil && m.ServerName != nil {
		return *m.ServerName
	}
	return ""
}

func (m *Request) GetScriptName() string {
	if m != nil && m.ScriptName != nil {
		return *m.ScriptName
	}
	return ""
}

func (m *Request) GetRequestCount() uint32 {
	if m != nil && m.RequestCount != nil {
		return *m.RequestCount
	}
	return 0
}

func (m *Request) GetDocumentSize() uint32 {
	if m != nil && m.DocumentSize != nil {
		return *m.DocumentSize
	}
	return 0
}

func (m *Request) GetMemoryPeak() uint32 {
	if m != nil && m.MemoryPeak != nil {
		return *m.MemoryPeak
	}
	return 0
}

func (m *Request) GetRequestTime() float32 {
	if m != nil && m.RequestTime != nil {
		return *m.RequestTime
	}
	return 0
}

func (m *Request) GetRuUtime() float32 {
	if m != nil && m.RuUtime != nil {
		return *m.RuUtime
	}
	return 0
}

func (m *Request) GetRuStime() float32 {
	if m != nil && m.RuStime != nil {
		return *m.RuStime
	}
	return 0
}

func (m *Request) GetTimerHitCount() []uint32 {
	if m != nil {
		return m.TimerHitCount
	}
	return nil
}

func (m *Request) GetTimerValue() []float32 {
	if m != nil {
		return m.TimerValue
	}
	return nil
}

func (m *Request) GetTimerTagCount() []uint32 {
	if m != nil {
		return m.TimerTagCount
	}
	return nil
}

func (m *Request) GetTimerTagName() []uint32 {
	if m != nil {
		return m.TimerTagName
	}
	return nil
}

func (m *Request) GetTimerTagValue() []uint32 {
	if m != nil {
		return m.TimerTagValue
	}
	return nil
}

func (m *Request) GetDictionary() []string {
	if m != nil {
		return m.Dictionary
	}
	return nil
}

func (m *Request) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *Request) GetMemoryFootprint() uint32 {
	if m != nil && m.MemoryFootprint != nil {
		return *m.MemoryFootprint
	}
	return 0
}

func (m *Request) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *Request) GetSchema() string {
	if m != nil && m.Schema != nil {
		return *m.Schema
	}
	return ""
}

func (m *Request) GetTagName() []uint32 {
	if m != nil {
		return m.TagName
	}
	return nil
}

func (m *Request) GetTagValue() []uint32 {
	if m != nil {
		return m.TagValue
	}
	return nil
}

func (m *Request) GetTimerRuUtime() []float32 {
	if m != nil {
		return m.TimerRuUtime
	}
	return nil
}

func (m *Request) GetTimerRuStime() []float32 {
	if m != nil {
		return m.TimerRuStime
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "pinba.Request")
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hostname == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(*m.Hostname)))
		i += copy(dAtA[i:], *m.Hostname)
	}
	if m.ServerName == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(*m.ServerName)))
		i += copy(dAtA[i:], *m.ServerName)
	}
	if m.ScriptName == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(*m.ScriptName)))
		i += copy(dAtA[i:], *m.ScriptName)
	}
	if m.RequestCount == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(*m.RequestCount))
	}
	if m.DocumentSize == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRequest(dAtA, i, uint64(*m.DocumentSize))
	}
	if m.MemoryPeak == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRequest(dAtA, i, uint64(*m.MemoryPeak))
	}
	if m.RequestTime == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RequestTime))))
		i += 4
	}
	if m.RuUtime == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RuUtime))))
		i += 4
	}
	if m.RuStime == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(*m.RuStime))))
		i += 4
	}
	if len(m.TimerHitCount) > 0 {
		for _, num := range m.TimerHitCount {
			dAtA[i] = 0x50
			i++
			i = encodeVarintRequest(dAtA, i, uint64(num))
		}
	}
	if len(m.TimerValue) > 0 {
		for _, num := range m.TimerValue {
			dAtA[i] = 0x5d
			i++
			f1 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
			i += 4
		}
	}
	if len(m.TimerTagCount) > 0 {
		for _, num := range m.TimerTagCount {
			dAtA[i] = 0x60
			i++
			i = encodeVarintRequest(dAtA, i, uint64(num))
		}
	}
	if len(m.TimerTagName) > 0 {
		for _, num := range m.TimerTagName {
			dAtA[i] = 0x68
			i++
			i = encodeVarintRequest(dAtA, i, uint64(num))
		}
	}
	if len(m.TimerTagValue) > 0 {
		for _, num := range m.TimerTagValue {
			dAtA[i] = 0x70
			i++
			i = encodeVarintRequest(dAtA, i, uint64(num))
		}
	}
	if len(m.Dictionary) > 0 {
		for _, s := range m.Dictionary {
			dAtA[i] = 0x7a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Status != nil {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRequest(dAtA, i, uint64(*m.Status))
	}
	if m.MemoryFootprint != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRequest(dAtA, i, uint64(*m.MemoryFootprint))
	}
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintRequest(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Schema != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(*m.Schema)))
		i += copy(dAtA[i:], *m.Schema)
	}
	if len(m.TagName) > 0 {
		for _, num := range m.TagName {
			dAtA[i] = 0xa0
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintRequest(dAtA, i, uint64(num))
		}
	}
	if len(m.TagValue) > 0 {
		for _, num := range m.TagValue {
			dAtA[i] = 0xa8
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintRequest(dAtA, i, uint64(num))
		}
	}
	if len(m.TimerRuUtime) > 0 {
		for _, num := range m.TimerRuUtime {
			dAtA[i] = 0xb5
			i++
			dAtA[i] = 0x1
			i++
			f2 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f2))
			i += 4
		}
	}
	if len(m.TimerRuStime) > 0 {
		for _, num := range m.TimerRuStime {
			dAtA[i] = 0xbd
			i++
			dAtA[i] = 0x1
			i++
			f3 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f3))
			i += 4
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hostname != nil {
		l = len(*m.Hostname)
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.ServerName != nil {
		l = len(*m.ServerName)
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.ScriptName != nil {
		l = len(*m.ScriptName)
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.RequestCount != nil {
		n += 1 + sovRequest(uint64(*m.RequestCount))
	}
	if m.DocumentSize != nil {
		n += 1 + sovRequest(uint64(*m.DocumentSize))
	}
	if m.MemoryPeak != nil {
		n += 1 + sovRequest(uint64(*m.MemoryPeak))
	}
	if m.RequestTime != nil {
		n += 5
	}
	if m.RuUtime != nil {
		n += 5
	}
	if m.RuStime != nil {
		n += 5
	}
	if len(m.TimerHitCount) > 0 {
		for _, e := range m.TimerHitCount {
			n += 1 + sovRequest(uint64(e))
		}
	}
	if len(m.TimerValue) > 0 {
		n += 5 * len(m.TimerValue)
	}
	if len(m.TimerTagCount) > 0 {
		for _, e := range m.TimerTagCount {
			n += 1 + sovRequest(uint64(e))
		}
	}
	if len(m.TimerTagName) > 0 {
		for _, e := range m.TimerTagName {
			n += 1 + sovRequest(uint64(e))
		}
	}
	if len(m.TimerTagValue) > 0 {
		for _, e := range m.TimerTagValue {
			n += 1 + sovRequest(uint64(e))
		}
	}
	if len(m.Dictionary) > 0 {
		for _, s := range m.Dictionary {
			l = len(s)
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	if m.Status != nil {
		n += 2 + sovRequest(uint64(*m.Status))
	}
	if m.MemoryFootprint != nil {
		n += 2 + sovRequest(uint64(*m.MemoryFootprint))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 2 + l + sovRequest(uint64(l))
		}
	}
	if m.Schema != nil {
		l = len(*m.Schema)
		n += 2 + l + sovRequest(uint64(l))
	}
	if len(m.TagName) > 0 {
		for _, e := range m.TagName {
			n += 2 + sovRequest(uint64(e))
		}
	}
	if len(m.TagValue) > 0 {
		for _, e := range m.TagValue {
			n += 2 + sovRequest(uint64(e))
		}
	}
	if len(m.TimerRuUtime) > 0 {
		n += 6 * len(m.TimerRuUtime)
	}
	if len(m.TimerRuStime) > 0 {
		n += 6 * len(m.TimerRuStime)
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Hostname = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServerName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ScriptName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestCount = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentSize", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DocumentSize = &v
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryPeak", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryPeak = &v
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RequestTime = &v2
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuUtime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RuUtime = &v2
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuStime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := float32(math.Float32frombits(v))
			m.RuStime = &v2
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TimerHitCount = append(m.TimerHitCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TimerHitCount) == 0 {
					m.TimerHitCount = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TimerHitCount = append(m.TimerHitCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerHitCount", wireType)
			}
		case 11:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.TimerValue = append(m.TimerValue, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.TimerValue) == 0 {
					m.TimerValue = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.TimerValue = append(m.TimerValue, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerValue", wireType)
			}
		case 12:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TimerTagCount = append(m.TimerTagCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TimerTagCount) == 0 {
					m.TimerTagCount = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TimerTagCount = append(m.TimerTagCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerTagCount", wireType)
			}
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TimerTagName = append(m.TimerTagName, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TimerTagName) == 0 {
					m.TimerTagName = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TimerTagName = append(m.TimerTagName, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerTagName", wireType)
			}
		case 14:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TimerTagValue = append(m.TimerTagValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TimerTagValue) == 0 {
					m.TimerTagValue = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TimerTagValue = append(m.TimerTagValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerTagValue", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dictionary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dictionary = append(m.Dictionary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryFootprint", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MemoryFootprint = &v
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &Request{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Schema = &s
			iNdEx = postIndex
		case 20:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TagName = append(m.TagName, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TagName) == 0 {
					m.TagName = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TagName = append(m.TagName, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
		case 21:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TagValue = append(m.TagValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TagValue) == 0 {
					m.TagValue = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TagValue = append(m.TagValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TagValue", wireType)
			}
		case 22:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.TimerRuUtime = append(m.TimerRuUtime, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.TimerRuUtime) == 0 {
					m.TimerRuUtime = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.TimerRuUtime = append(m.TimerRuUtime, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerRuUtime", wireType)
			}
		case 23:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.TimerRuStime = append(m.TimerRuStime, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.TimerRuStime) == 0 {
					m.TimerRuStime = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.TimerRuStime = append(m.TimerRuStime, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerRuStime", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/pinba/request.proto", fileDescriptor_request_c55800836c973032) }

var fileDescriptor_request_c55800836c973032 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x5d, 0x6e, 0xd4, 0x30,
	0x10, 0xc7, 0x49, 0x42, 0xf7, 0x63, 0xb2, 0xd9, 0x2d, 0x06, 0x8a, 0x0b, 0x52, 0x6a, 0x3e, 0x84,
	0x02, 0x0f, 0x5b, 0x89, 0x23, 0x80, 0x84, 0xfa, 0x84, 0x90, 0x5b, 0x78, 0x8d, 0x4c, 0x6a, 0xba,
	0x56, 0x49, 0x1c, 0x1c, 0xa7, 0x52, 0x7b, 0x0f, 0x24, 0x8e, 0xc4, 0x23, 0x47, 0x40, 0xcb, 0x45,
	0xaa, 0x8c, 0x9d, 0xa4, 0xfb, 0xb4, 0xf2, 0xef, 0xff, 0xd3, 0xcc, 0xce, 0x4c, 0xe0, 0xb0, 0x36,
	0xda, 0xea, 0xe3, 0x5a, 0x55, 0xdf, 0xc4, 0xb1, 0x91, 0x3f, 0x5b, 0xd9, 0xd8, 0x35, 0x32, 0xb2,
	0x87, 0xf0, 0xc5, 0xaf, 0x09, 0x4c, 0xb9, 0x0b, 0xc8, 0x53, 0x98, 0x6d, 0x74, 0x63, 0x2b, 0x51,
	0x4a, 0x1a, 0xb0, 0x30, 0x9b, 0xf3, 0xe1, 0x4d, 0x8e, 0x20, 0x6e, 0xa4, 0xb9, 0x92, 0x26, 0xc7,
	0x38, 0xc4, 0x18, 0x1c, 0xfa, 0xd4, 0x0b, 0x85, 0x51, 0xb5, 0x75, 0x42, 0xe4, 0x05, 0x44, 0x28,
	0xbc, 0x84, 0xc4, 0xff, 0x83, 0xbc, 0xd0, 0x6d, 0x65, 0xe9, 0x7d, 0x16, 0x66, 0x09, 0x5f, 0x78,
	0xf8, 0xa1, 0x63, 0x9d, 0x74, 0xae, 0x8b, 0xb6, 0x94, 0x95, 0xcd, 0x1b, 0x75, 0x23, 0xe9, 0x9e,
	0x93, 0x7a, 0x78, 0xaa, 0x6e, 0xb0, 0x55, 0x29, 0x4b, 0x6d, 0xae, 0xf3, 0x5a, 0x8a, 0x4b, 0x3a,
	0x41, 0x05, 0x1c, 0xfa, 0x2c, 0xc5, 0x25, 0x79, 0x0e, 0x7d, 0xd5, 0xdc, 0xaa, 0x52, 0xd2, 0x29,
	0x0b, 0xb3, 0x90, 0xc7, 0x9e, 0x9d, 0xa9, 0x52, 0x92, 0x43, 0x98, 0x99, 0x36, 0x6f, 0x31, 0x9e,
	0x61, 0x3c, 0x35, 0xed, 0x17, 0x3b, 0x46, 0x0d, 0x46, 0xf3, 0x3e, 0x3a, 0xc5, 0xe8, 0x35, 0xac,
	0xba, 0x5f, 0x93, 0x6f, 0x54, 0x3f, 0x05, 0xb0, 0x28, 0x4b, 0x78, 0x82, 0xf8, 0x44, 0xf9, 0x31,
	0x8e, 0x20, 0x76, 0xde, 0x95, 0xf8, 0xd1, 0x4a, 0x1a, 0xb3, 0x28, 0x0b, 0x39, 0x20, 0xfa, 0xda,
	0x91, 0xb1, 0x90, 0x15, 0x17, 0xbe, 0xd0, 0xe2, 0x4e, 0xa1, 0x33, 0x71, 0xe1, 0x0a, 0xbd, 0x82,
	0xe5, 0xe8, 0xe1, 0x62, 0x13, 0xd4, 0x16, 0xbd, 0x86, 0xab, 0xdd, 0xa9, 0xe6, 0x5a, 0x2e, 0x77,
	0xab, 0xb9, 0xae, 0x29, 0xc0, 0xb9, 0x2a, 0xac, 0xd2, 0x95, 0x30, 0xd7, 0x74, 0xc5, 0xa2, 0xee,
	0x44, 0x23, 0x21, 0x07, 0x30, 0x69, 0xac, 0xb0, 0x6d, 0x43, 0xf7, 0x59, 0x90, 0x25, 0xdc, 0xbf,
	0xc8, 0x1b, 0xd8, 0xf7, 0x0b, 0xff, 0xae, 0xb5, 0xad, 0x8d, 0xaa, 0x2c, 0x7d, 0x80, 0xc6, 0xca,
	0xf1, 0x8f, 0x3d, 0x26, 0x6f, 0x61, 0xe6, 0xd7, 0xdc, 0x50, 0xc2, 0xa2, 0x2c, 0x7e, 0xb7, 0x5c,
	0xe3, 0x97, 0xb6, 0xf6, 0x5f, 0x19, 0x1f, 0x72, 0x6c, 0x57, 0x6c, 0x64, 0x29, 0xe8, 0x43, 0x16,
	0x64, 0x73, 0xee, 0x5f, 0xdd, 0x01, 0x86, 0x71, 0x1f, 0xe1, 0x1c, 0x53, 0xeb, 0x27, 0x7d, 0x06,
	0xf3, 0x71, 0xc6, 0xc7, 0x98, 0x75, 0xae, 0x1b, 0x6f, 0x58, 0xd6, 0x70, 0xd9, 0x03, 0x5c, 0xbc,
	0x5b, 0x16, 0xf7, 0xe7, 0xbd, 0x6b, 0xb9, 0x23, 0x3f, 0xd9, 0xb1, 0xf0, 0xd2, 0xef, 0xc9, 0x9f,
	0x6d, 0x1a, 0xfc, 0xdd, 0xa6, 0xc1, 0xbf, 0x6d, 0x1a, 0xfc, 0xfe, 0x9f, 0xde, 0x3b, 0x89, 0x6e,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x60, 0x6a, 0x27, 0x21, 0x4e, 0x03, 0x00, 0x00,
}
