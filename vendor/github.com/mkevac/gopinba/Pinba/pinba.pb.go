// Code generated by protoc-gen-gogo.
// source: pinba.proto
// DO NOT EDIT!

/*
	Package Pinba is a generated protocol buffer package.

	It is generated from these files:
		pinba.proto

	It has these top-level messages:
		Request
*/
package Pinba

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import unsafe "unsafe"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Request struct {
	Hostname         string    `protobuf:"bytes,1,req,name=hostname" json:"hostname"`
	ServerName       string    `protobuf:"bytes,2,req,name=server_name" json:"server_name"`
	ScriptName       string    `protobuf:"bytes,3,req,name=script_name" json:"script_name"`
	RequestCount     uint32    `protobuf:"varint,4,req,name=request_count" json:"request_count"`
	DocumentSize     uint32    `protobuf:"varint,5,req,name=document_size" json:"document_size"`
	MemoryPeak       uint32    `protobuf:"varint,6,req,name=memory_peak" json:"memory_peak"`
	RequestTime      float32   `protobuf:"fixed32,7,req,name=request_time" json:"request_time"`
	RuUtime          float32   `protobuf:"fixed32,8,req,name=ru_utime" json:"ru_utime"`
	RuStime          float32   `protobuf:"fixed32,9,req,name=ru_stime" json:"ru_stime"`
	TimerHitCount    []uint32  `protobuf:"varint,10,rep,name=timer_hit_count" json:"timer_hit_count,omitempty"`
	TimerValue       []float32 `protobuf:"fixed32,11,rep,name=timer_value" json:"timer_value,omitempty"`
	TimerTagCount    []uint32  `protobuf:"varint,12,rep,name=timer_tag_count" json:"timer_tag_count,omitempty"`
	TimerTagName     []uint32  `protobuf:"varint,13,rep,name=timer_tag_name" json:"timer_tag_name,omitempty"`
	TimerTagValue    []uint32  `protobuf:"varint,14,rep,name=timer_tag_value" json:"timer_tag_value,omitempty"`
	Dictionary       []string  `protobuf:"bytes,15,rep,name=dictionary" json:"dictionary,omitempty"`
	Status           uint32    `protobuf:"varint,16,opt,name=status" json:"status"`
	MemoryFootprint  uint32    `protobuf:"varint,17,opt,name=memory_footprint" json:"memory_footprint"`
	Requests         []Request `protobuf:"bytes,18,rep,name=requests" json:"requests"`
	Schema           string    `protobuf:"bytes,19,opt,name=schema" json:"schema"`
	TagName          []uint32  `protobuf:"varint,20,rep,name=tag_name" json:"tag_name,omitempty"`
	TagValue         []uint32  `protobuf:"varint,21,rep,name=tag_value" json:"tag_value,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

func (m *Request) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Request) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *Request) GetScriptName() string {
	if m != nil {
		return m.ScriptName
	}
	return ""
}

func (m *Request) GetRequestCount() uint32 {
	if m != nil {
		return m.RequestCount
	}
	return 0
}

func (m *Request) GetDocumentSize() uint32 {
	if m != nil {
		return m.DocumentSize
	}
	return 0
}

func (m *Request) GetMemoryPeak() uint32 {
	if m != nil {
		return m.MemoryPeak
	}
	return 0
}

func (m *Request) GetRequestTime() float32 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

func (m *Request) GetRuUtime() float32 {
	if m != nil {
		return m.RuUtime
	}
	return 0
}

func (m *Request) GetRuStime() float32 {
	if m != nil {
		return m.RuStime
	}
	return 0
}

func (m *Request) GetTimerHitCount() []uint32 {
	if m != nil {
		return m.TimerHitCount
	}
	return nil
}

func (m *Request) GetTimerValue() []float32 {
	if m != nil {
		return m.TimerValue
	}
	return nil
}

func (m *Request) GetTimerTagCount() []uint32 {
	if m != nil {
		return m.TimerTagCount
	}
	return nil
}

func (m *Request) GetTimerTagName() []uint32 {
	if m != nil {
		return m.TimerTagName
	}
	return nil
}

func (m *Request) GetTimerTagValue() []uint32 {
	if m != nil {
		return m.TimerTagValue
	}
	return nil
}

func (m *Request) GetDictionary() []string {
	if m != nil {
		return m.Dictionary
	}
	return nil
}

func (m *Request) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Request) GetMemoryFootprint() uint32 {
	if m != nil {
		return m.MemoryFootprint
	}
	return 0
}

func (m *Request) GetRequests() []Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *Request) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Request) GetTagName() []uint32 {
	if m != nil {
		return m.TagName
	}
	return nil
}

func (m *Request) GetTagValue() []uint32 {
	if m != nil {
		return m.TagValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "Pinba.Request")
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hostname)
	n += 1 + l + sovPinba(uint64(l))
	l = len(m.ServerName)
	n += 1 + l + sovPinba(uint64(l))
	l = len(m.ScriptName)
	n += 1 + l + sovPinba(uint64(l))
	n += 1 + sovPinba(uint64(m.RequestCount))
	n += 1 + sovPinba(uint64(m.DocumentSize))
	n += 1 + sovPinba(uint64(m.MemoryPeak))
	n += 5
	n += 5
	n += 5
	if len(m.TimerHitCount) > 0 {
		for _, e := range m.TimerHitCount {
			n += 1 + sovPinba(uint64(e))
		}
	}
	if len(m.TimerValue) > 0 {
		n += 5 * len(m.TimerValue)
	}
	if len(m.TimerTagCount) > 0 {
		for _, e := range m.TimerTagCount {
			n += 1 + sovPinba(uint64(e))
		}
	}
	if len(m.TimerTagName) > 0 {
		for _, e := range m.TimerTagName {
			n += 1 + sovPinba(uint64(e))
		}
	}
	if len(m.TimerTagValue) > 0 {
		for _, e := range m.TimerTagValue {
			n += 1 + sovPinba(uint64(e))
		}
	}
	if len(m.Dictionary) > 0 {
		for _, s := range m.Dictionary {
			l = len(s)
			n += 1 + l + sovPinba(uint64(l))
		}
	}
	n += 2 + sovPinba(uint64(m.Status))
	n += 2 + sovPinba(uint64(m.MemoryFootprint))
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 2 + l + sovPinba(uint64(l))
		}
	}
	l = len(m.Schema)
	n += 2 + l + sovPinba(uint64(l))
	if len(m.TagName) > 0 {
		for _, e := range m.TagName {
			n += 2 + sovPinba(uint64(e))
		}
	}
	if len(m.TagValue) > 0 {
		for _, e := range m.TagValue {
			n += 2 + sovPinba(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPinba(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPinba(x uint64) (n int) {
	return sovPinba(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Request) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintPinba(data, i, uint64(len(m.Hostname)))
	i += copy(data[i:], m.Hostname)
	data[i] = 0x12
	i++
	i = encodeVarintPinba(data, i, uint64(len(m.ServerName)))
	i += copy(data[i:], m.ServerName)
	data[i] = 0x1a
	i++
	i = encodeVarintPinba(data, i, uint64(len(m.ScriptName)))
	i += copy(data[i:], m.ScriptName)
	data[i] = 0x20
	i++
	i = encodeVarintPinba(data, i, uint64(m.RequestCount))
	data[i] = 0x28
	i++
	i = encodeVarintPinba(data, i, uint64(m.DocumentSize))
	data[i] = 0x30
	i++
	i = encodeVarintPinba(data, i, uint64(m.MemoryPeak))
	data[i] = 0x3d
	i++
	*(*float32)(unsafe.Pointer(&data[i])) = m.RequestTime
	i += 4
	data[i] = 0x45
	i++
	*(*float32)(unsafe.Pointer(&data[i])) = m.RuUtime
	i += 4
	data[i] = 0x4d
	i++
	*(*float32)(unsafe.Pointer(&data[i])) = m.RuStime
	i += 4
	if len(m.TimerHitCount) > 0 {
		for _, num := range m.TimerHitCount {
			data[i] = 0x50
			i++
			i = encodeVarintPinba(data, i, uint64(num))
		}
	}
	if len(m.TimerValue) > 0 {
		for _, num := range m.TimerValue {
			data[i] = 0x5d
			i++
			*(*float32)(unsafe.Pointer(&data[i])) = num
			i += 4
		}
	}
	if len(m.TimerTagCount) > 0 {
		for _, num := range m.TimerTagCount {
			data[i] = 0x60
			i++
			i = encodeVarintPinba(data, i, uint64(num))
		}
	}
	if len(m.TimerTagName) > 0 {
		for _, num := range m.TimerTagName {
			data[i] = 0x68
			i++
			i = encodeVarintPinba(data, i, uint64(num))
		}
	}
	if len(m.TimerTagValue) > 0 {
		for _, num := range m.TimerTagValue {
			data[i] = 0x70
			i++
			i = encodeVarintPinba(data, i, uint64(num))
		}
	}
	if len(m.Dictionary) > 0 {
		for _, s := range m.Dictionary {
			data[i] = 0x7a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	data[i] = 0x80
	i++
	data[i] = 0x1
	i++
	i = encodeVarintPinba(data, i, uint64(m.Status))
	data[i] = 0x88
	i++
	data[i] = 0x1
	i++
	i = encodeVarintPinba(data, i, uint64(m.MemoryFootprint))
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			data[i] = 0x92
			i++
			data[i] = 0x1
			i++
			i = encodeVarintPinba(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	data[i] = 0x9a
	i++
	data[i] = 0x1
	i++
	i = encodeVarintPinba(data, i, uint64(len(m.Schema)))
	i += copy(data[i:], m.Schema)
	if len(m.TagName) > 0 {
		for _, num := range m.TagName {
			data[i] = 0xa0
			i++
			data[i] = 0x1
			i++
			i = encodeVarintPinba(data, i, uint64(num))
		}
	}
	if len(m.TagValue) > 0 {
		for _, num := range m.TagValue {
			data[i] = 0xa8
			i++
			data[i] = 0x1
			i++
			i = encodeVarintPinba(data, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Pinba(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pinba(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPinba(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPinbaUnsafe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPinbaUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPinbaUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPinbaUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCount", wireType)
			}
			m.RequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RequestCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentSize", wireType)
			}
			m.DocumentSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DocumentSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryPeak", wireType)
			}
			m.MemoryPeak = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemoryPeak |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestTime = *(*float32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
			hasFields[0] |= uint64(0x00000040)
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuUtime", wireType)
			}
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			m.RuUtime = *(*float32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
			hasFields[0] |= uint64(0x00000080)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuStime", wireType)
			}
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			m.RuStime = *(*float32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
			hasFields[0] |= uint64(0x00000100)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerHitCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimerHitCount = append(m.TimerHitCount, v)
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerValue", wireType)
			}
			var v float32
			if iNdEx+4 > l {
				return io.ErrUnexpectedEOF
			}
			v = *(*float32)(unsafe.Pointer(&data[iNdEx]))
			iNdEx += 4
			m.TimerValue = append(m.TimerValue, v)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerTagCount", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimerTagCount = append(m.TimerTagCount, v)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerTagName", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimerTagName = append(m.TimerTagName, v)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerTagValue", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimerTagValue = append(m.TimerTagValue, v)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dictionary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPinbaUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dictionary = append(m.Dictionary, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryFootprint", wireType)
			}
			m.MemoryFootprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemoryFootprint |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPinbaUnsafe
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, Request{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPinbaUnsafe
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagName", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagName = append(m.TagName, v)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagValue", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TagValue = append(m.TagValue, v)
		default:
			iNdEx = preIndex
			skippy, err := skipPinbaUnsafe(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPinbaUnsafe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("hostname")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("server_name")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("script_name")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("request_count")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("document_size")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("memory_peak")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("request_time")
	}
	if hasFields[0]&uint64(0x00000080) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ru_utime")
	}
	if hasFields[0]&uint64(0x00000100) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("ru_stime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPinbaUnsafe(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPinbaUnsafe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPinbaUnsafe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPinbaUnsafe
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPinbaUnsafe
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPinbaUnsafe(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPinbaUnsafe = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPinbaUnsafe   = fmt.Errorf("proto: integer overflow")
)
